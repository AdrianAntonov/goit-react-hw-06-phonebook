{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addingContact","createAction","name","number","payload","id","shortId","generate","deletingContact","filterContact","itemsReducer","createReducer","actions","state","some","item","alert","filter","itemsFilter","_","combineReducers","items","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","phonebookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","exportStore","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","changeHandler","e","target","value","className","styles","form","onSubmit","preventDefault","phonebookActions","type","pattern","title","required","onChange","add","ContactList","contactList","useSelector","filterToLowerCase","toLowerCase","includes","list","map","button","onClick","Filter","htmlFor","input","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,IAAM,2B,mBCAzDD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,OAAS,8B,mBCA5DD,EAAOC,QAAU,CAAC,MAAQ,wB,yMC6BbC,EAAgBC,YAC3B,2BACA,SAACC,EAAMC,GAAP,MAAmB,CACjBC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cAKOK,EAAkBP,YAAa,6BAE/BQ,EAAgBR,YAAa,2BCnCpCS,EAAeC,YAAc,IAAD,mBAC/BC,GAAwB,SAACC,EAAD,GAAyB,IAAfT,EAAc,EAAdA,QAEjC,OADcS,EAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKb,OAASE,EAAQF,SAEvDc,MAAM,GAAD,OAAIZ,EAAQF,KAAZ,4BACEW,GACF,sBAAWA,GAAX,CAAkBT,OANK,cAQ/BQ,GAA0B,SAACC,EAAD,OAAUT,EAAV,EAAUA,QAAV,OACzBS,EAAMI,QAAO,qBAAGZ,KAAgBD,QATF,IAY5Bc,EAAcP,YAAc,GAAD,eAC9BC,GAAwB,SAACO,EAAD,YAAMf,YAmClBgB,cAAgB,CAC7BC,MAAOX,EACPO,OAAQC,ICrCJI,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAORC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,SAAUC,YAAeR,EAAuBS,IAQlDC,WAAY,SAACC,GAAD,OACVA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAE3DC,OAAOC,MACZC,UAAUC,IAUGC,EALK,CAClBpB,QACAqB,UAJgBC,YAAatB,I,gCC1ChB,SAASuB,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOhD,EAAP,KAAaiD,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAO/C,EAAP,KAAeiD,EAAf,KACMC,EAAWC,cAMXC,EAAgB,SAACC,GACrB,MAAwBA,EAAEC,OAAlBvD,EAAR,EAAQA,KAAMwD,EAAd,EAAcA,MAEd,OAAQxD,GACN,IAAK,OACHiD,EAAQO,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MACF,QACE,SAgBN,OACE,sBAAKC,UAAWC,IAAOC,KAAvB,UACE,sCACA,uBAAMC,SATY,SAACN,GACrBA,EAAEO,iBACFV,EAASW,EAA+B9D,EAAMC,IA3B9CgD,EAAQ,IACRC,EAAU,KAiCR,UACE,uBACEa,KAAK,OACL/D,KAAK,OACLwD,MAAOxD,EACPgE,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUd,IAGZ,wCACA,uBACEU,KAAK,MACL/D,KAAK,SACLwD,MAAOvD,EACP+D,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUd,IAEZ,uBACA,wBAAQI,UAAWC,IAAOU,IAAKL,KAAK,SAApC,+B,qBC/DO,SAASM,IAEtB,IAAMC,EAAcC,aAAY,SAAC5D,GAC/B,IAAM6D,EAAoB7D,EAAMgB,SAASZ,OAAO0D,cAEhD,OAAO9D,EAAMgB,SAASR,MAAMJ,QAAO,qBAAGf,KAC/ByE,cAAcC,SAASF,SAI1BrB,EAAWC,cAMjB,OACE,qBAAKK,UAAWC,IAAOiB,KAAvB,SACGL,EAAYM,KAAI,SAAC/D,GAAD,OACf,+BACE,+BAAOA,EAAKb,OADd,IAC2B,+BAAOa,EAAKZ,SACrC,wBACE8D,KAAK,SACLN,UAAWC,IAAOmB,OAElBC,QAAS,kBAAM3B,EAASW,EAAiCjD,EAAKV,MAJhE,sBAFOU,EAAKV,S,qBClBP,SAAS4E,IACtB,IAAMvB,EAAQe,aAAY,SAAC5D,GAAD,OAAWA,EAAMgB,SAASZ,UAC9CoC,EAAWC,cAEjB,OACE,sBAAKK,UAAWC,IAAO3C,OAAvB,UACE,uBAAOiE,QAAQ,SAAf,mCACA,uBACA,uBACEvB,UAAWC,IAAOuB,MAClBlB,KAAK,OACL/D,KAAK,SACLG,GAAG,SACHqD,MAAOA,EAEPW,SAAU,SAACb,GAAD,OACRH,EAASW,EAA+BR,EAAEC,OAAOC,c,MCf5C,SAAS0B,IACtB,IAAMvD,EAAW4C,aAAY,SAAC5D,GAAD,OAAWA,EAAMgB,SAASR,SAEvD,OACE,sBAAKsC,UAAU,MAAf,UACE,2CACA,cAACV,EAAD,IACA,0CACA,cAACgC,EAAD,IACCpD,GAAY,cAAC0C,EAAD,OCVnBc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7D,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAa8D,QAAS,KAAMzC,UAAWrB,EAAMqB,UAA7C,SACE,cAAC,EAAD,UAIN0C,SAASC,eAAe,W","file":"static/js/main.0eb1e006.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1VaEy\",\"add\":\"ContactForm_add__IJD4a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__33C_F\",\"button\":\"ContactList_button__1RMkL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2Lf3-\"};","import shortId from \"shortid\";\n// import actionTypes from \"./phonebook-types\";\n// ========================== Redux Toolkit ========================\nimport { createAction } from \"@reduxjs/toolkit\";\n// ========================== Redux Toolkit ========================\n\n// ==========================   Redux   ========================\n\n// export const addingContact = (name, number) => ({\n//   type: actionTypes.ADD_CONTACT,\n//   payload: {\n//     id: shortId.generate(),\n//     name,\n//     number,\n//   },\n// });\n\n// export const deletingingContact = (id) => ({\n//   type: actionTypes.DELETE_CONTACT,\n//   payload: id,\n// });\n\n// export const fiterContact = (value) => ({\n//   type: actionTypes.FILTER_CONTACT,\n//   payload: value,\n// });\n// ==========================   Redux   ========================\n\n// ========================== Redux Toolkit ========================\n\nexport const addingContact = createAction(\n  \"phonebook/addingContact\",\n  (name, number) => ({\n    payload: {\n      id: shortId.generate(),\n      name,\n      number,\n    },\n  })\n);\n\nexport const deletingContact = createAction(\"phonebook/deletingContact\");\n\nexport const filterContact = createAction(\"phonebook/filterContact\");\n\n// ========================== Redux Toolkit ========================\n","// import actionTypes from \"./phonebook-types\";\nimport { combineReducers } from \"redux\";\n\n// ==========================  Redux Toolkit ========================\n\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"./phonebook-actions\";\n\nconst itemsReducer = createReducer([], {\n  [actions.addingContact]: (state, { payload }) => {\n    const check = state.some((item) => item.name === payload.name);\n    if (check) {\n      alert(`${payload.name} is already in Contacts`);\n      return state;\n    } else return [...state, payload];\n  },\n  [actions.deletingContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst itemsFilter = createReducer(\"\", {\n  [actions.filterContact]: (_, { payload }) => payload,\n});\n\n// ==========================  Redux Toolkit ========================\n\n// ==========================  Redux   ========================\n\n// const itemsReducer = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.ADD_CONTACT:\n//       const check = state.some((item) => item.name === payload.name);\n//       if (check) {\n//         alert(`${payload.name} is already in Contacts`);\n//         return state;\n//       } else return [...state, payload];\n\n//     case actionTypes.DELETE_CONTACT:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const itemsFilter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.FILTER_CONTACT:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\n// ==========================  Redux  ========================\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: itemsFilter,\n});\n","// import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport logger from \"redux-logger\";\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\n\n// console.log(getDefaultMiddleware);\n\n// const middleware = [...getDefaultMiddleware(), logger];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(persistConfig, phonebookReducer),\n// });\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, phonebookReducer),\n  },\n\n  // reducer: {\n  //   contacts: phonebookReducer,\n  // },\n  // middleware,\n  // middleware: (getDefaultMiddleware) => [...getDefaultMiddleware(), logger],\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nconst exportStore = {\n  store,\n  persistor,\n};\n\nexport default exportStore;\n// export default { store, persistor };\n","import { useState } from \"react\";\n// import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport * as phonebookActions from \"../../redux/phonebook/phonebook-actions\";\nimport styles from \"./ContactForm.module.css\";\n\n// function ContactForm({ contactAdding }) {\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const changeHandler = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  // const submitHandler = (e) => {\n  //   e.preventDefault();\n  //   contactAdding(name, number);\n  //   reset();\n  // };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(phonebookActions.addingContact(name, number));\n    reset();\n  };\n\n  return (\n    <div className={styles.form}>\n      <h3>Name</h3>\n      <form onSubmit={submitHandler}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={changeHandler}\n        />\n\n        <h3>Number</h3>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={changeHandler}\n        />\n        <br />\n        <button className={styles.add} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\n// ContactForm.propTypes = {\n//   contactAdding: PropTypes.func,\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   contactAdding: (name, number) =>\n//     dispatch(phonebookActions.addingContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as phonebookActions from \"../../redux/phonebook/phonebook-actions\";\nimport styles from \"./ContactList.module.css\";\n\nexport default function ContactList() {\n  // function ContactList({ deleteContact, contactList }) {\n  const contactList = useSelector((state) => {\n    const filterToLowerCase = state.contacts.filter.toLowerCase();\n\n    return state.contacts.items.filter(({ name }) =>\n      name.toLowerCase().includes(filterToLowerCase)\n    );\n  });\n\n  const dispatch = useDispatch();\n\n  // const deleteItem = (id) => {\n  //   deleteContact(id);\n  // };\n\n  return (\n    <div className={styles.list}>\n      {contactList.map((item) => (\n        <li key={item.id}>\n          <span>{item.name}</span> <span>{item.number}</span>\n          <button\n            type=\"button\"\n            className={styles.button}\n            // onClick={() => deleteItem(item.id)}\n            onClick={() => dispatch(phonebookActions.deletingContact(item.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  deleteContact: PropTypes.func,\n  contactList: PropTypes.array,\n};\n\n// const getFilteredContacts = (items, filter) => {\n//   const filterToLowerCase = filter.toLowerCase();\n//   return items.filter(({ name }) =>\n//     name.toLowerCase().includes(filterToLowerCase)\n//   );\n// };\n\n// const mapStateToProps = (state) => {\n//   const { items, filter } = state.contacts;\n//   const filteredContacts = getFilteredContacts(items, filter);\n\n//   return { contactList: filteredContacts };\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   deleteContact: (id) => dispatch(phonebookActions.deletingContact(id)),\n// });\n\n// export default connect(mapStateToProps,mapDispatchToProps)(ContactList);\n","// import { connect } from \"react-redux\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as phonebookActions from \"../../redux/phonebook/phonebook-actions\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\n\n// function Filter({ value, onChange }) {\nexport default function Filter() {\n  const value = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.filter}>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <br />\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        value={value}\n        // onChange={onChange}\n        onChange={(e) =>\n          dispatch(phonebookActions.filterContact(e.target.value))\n        }\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (e) => dispatch(phonebookActions.filterContact(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// import { connect } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nimport \"./App.css\";\n\nexport default function App() {\n  const contacts = useSelector((state) => state.contacts.items);\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {contacts && <ContactList />}\n    </div>\n  );\n}\n\nApp.propTypes = {\n  contacts: PropTypes.object,\n};\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.contacts.items,\n// });\n\n// export default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}